public class HousingApplicationController {
	private HousingApplication.Form hapForm;
	private HousingApplication.BoxPDFUploader uploader;
	transient HousingApplication.PDFResult[] pdfResults;
	transient Attachment[] attachments;
	private Id[] attachmentIds;

	public HousingApplication.Building[] buildings {get; set;}
	public Client__c client {get; set;}
	public String clientId {get; set;}
	public String hapCaseId {get; set;}
	public String initialState {get; set;}
	public String status {get; set;}
	public String pdfJSONResults {get; set;}
	/** actionFunction fetchPDFs passes formData **/
	public String formData {get; set;}
	public String applicationData {get; set;}
	public Id buildingId {get; set;}

	public HousingApplicationController() {
		clientId = ApexPages.currentPage().getParameters().get('clientId');
		hapCaseId = ApexPages.currentPage().getParameters().get('hapCaseId');
		hapForm = new HousingApplication.Form(clientId, hapCaseId);
		client = hapform.client.clientRecord;
		buildings = HousingApplication.getBuildingData(clientId);
		attachments = new List<Attachment>();
		attachmentIds = new List<Id>();

		JSONGenerator gen = JSON.createGenerator(false);
		gen.writeStartObject();
		if(hapForm.hapCase.Application_Data__c != null){
			gen.writeObjectField('form',(Map<String,Object>)JSON.deserializeUntyped(hapForm.hapCase.Application_Data__c));
		} else {
			gen.writeObjectField('form', hapForm.data);
		}
		gen.writeObjectField('eligibility', hapForm.client.eligibility);
		gen.writeObjectField('buildings', buildings);
		gen.writeEndObject();
		initialState = gen.getAsString();

		pdfResults = new List<HousingApplication.PDFResult>();
		pdfJSONResults = JSON.serialize(pdfResults);

		uploader = new HousingApplication.BoxPDFUploader();
		status = 'READY';
	}

	public void createFolder(){
		uploader.createOrGetFolder(hapCaseId);
		uploader.commitChanges();
	}

	public void fetchPDFs(){
		pdfResults = new List<HousingApplication.PDFResult>();
		transient HousingApplication.PDFResult pdfResult = hapForm.fetchPDFs(formData);

		if(pdfResult.status != 'OK'){
			status = 'ERROR: ' + pdfResult.status;
		} else {
			pdfResults.add(pdfResult);

			attachments = uploader.createAttachments(pdfResults, hapCaseId);
			insert attachments;
			for(Attachment a : attachments)
				attachmentIds.add(a.Id);

			status = 'PDF_FETCHED';

			hapForm.hapCase.Application_Data__c = applicationData;
			update hapForm.hapCase;

			Application__c app = new Application__c();
			app.Social_Services_Case__c = hapCaseId;
			app.Date_Completed__c = Date.today();
			app.Building_Name__c = buildingId;
			app.Comments__c = 'Application generated by MegaAppÂ©';
			insert app;
		}
	}

	public void uploadPDFsToBox(){
		attachments = [
			SELECT Id, Name, Body, ParentId
			FROM Attachment
			WHERE Id IN :attachmentIds
		];

		uploader.uploadAttachments(attachments);
		uploader.commitChanges();
		delete attachments;
		status = 'COMPLETE';
	}
}
